<?xml version="1.0"?>
<root main_tree_to_execute="MainTree">
    <!-- ////////// -->
    <BehaviorTree ID="AvoidWall">
        <Control ID="IsFrontClear" detectDistance="600" name="">
            <AlwaysSuccess/>
            <RetryUntilSuccessful num_attempts="100">
                <Control ID="IsFrontClear" detectDistance="1000" name="">
                    <AlwaysSuccess/>
                    <ForceFailure>
                        <Action ID="Move" name="turn left" rotation="-5" speed="0"/>
                    </ForceFailure>
                </Control>
            </RetryUntilSuccessful>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="MainTree">
        <Control ID="EndlessLoop" name="">
            <Decorator ID="PrintDecorator" name="" text="Restart">
                <Delay delay_msec="3000" name="Restart Delay">
                    <Fallback name="Emergency Stop">
                        <Parallel failure_threshold="1" success_threshold="2">
                            <KeepRunningUntilFailure>
                                <Delay delay_msec="1000">
                                    <Sequence>
                                        <Action ID="GetRuntime" output="{time}"/>
                                        <Action ID="Print" text="{time}"/>
                                    </Sequence>
                                </Delay>
                            </KeepRunningUntilFailure>
                            <Parallel failure_threshold="1" success_threshold="2">
                                <Delay delay_msec="1000" name="&#10;&#10;&#10;">
                                    <Action ID="Print" name="Random Action" text="1"/>
                                </Delay>
                                <Delay delay_msec="1100">
                                    <Action ID="Print" name="Random Action" text="2"/>
                                </Delay>
                            </Parallel>
                            <Delay delay_msec="10000">
                                <Sequence>
                                    <Action ID="Print" text="Timed Stop"/>
                                    <AlwaysFailure name="Trigger Stop"/>
                                </Sequence>
                            </Delay>
                            <KeepRunningUntilFailure>
                                <ForceSuccess>
                                    <Sequence>
                                        <SubTree ID="AvoidWall" __shared_blackboard="true"/>
                                        <Fallback>
                                            <Action ID="Move" name="moveForward" rotation="0" speed="5"/>
                                        </Fallback>
                                    </Sequence>
                                </ForceSuccess>
                            </KeepRunningUntilFailure>
                        </Parallel>
                        <SubTree ID="StopAll" __shared_blackboard="True"/>
                    </Fallback>
                </Delay>
            </Decorator>
        </Control>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="StopAll">
        <Sequence>
            <Action ID="Print" text="Stop All"/>
            <Action ID="Move" name="Stop Movement" rotation="0" speed="0"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <SubTree ID="AvoidWall">
            <inout_port name="__shared_blackboard"/>
        </SubTree>
        <Decorator ID="EndlessLoop"/>
        <Action ID="GetRuntime">
            <output_port name="output" type="std::string">Current runtime</output_port>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
        </Action>
        <Control ID="IsFrontClear">
            <input_port name="detectDistance" type="int"/>
        </Control>
        <Action ID="Move">
            <input_port name="keepRunning" type="bool"/>
            <input_port name="rotation" type="int"/>
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="sides" type="int"/>
            <input_port name="speed" type="int"/>
        </Action>
        <Action ID="Print">
            <input_port name="server_name" type="std::string">Action server name</input_port>
            <input_port name="server_timeout" type="std::chrono::duration&lt;long, std::ratio&lt;1l, 1000l&gt; &gt;"/>
            <input_port name="text" type="std::string">Text to print</input_port>
        </Action>
        <Decorator ID="PrintDecorator">
            <input_port name="text" type="std::string">Text to print</input_port>
        </Decorator>
        <SubTree ID="StopAll">
            <inout_port name="__shared_blackboard"/>
        </SubTree>
    </TreeNodesModel>
    <!-- ////////// -->
</root>
